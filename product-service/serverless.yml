service: product-service

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: eu-west-1
  profile: default
  environment:
    DYNAMODB_TABLE_PRODUCTS: products
    DYNAMODB_TABLE_STOCKS: stocks
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource:
        - 'arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.DYNAMODB_TABLE_PRODUCTS}'
        - 'arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.DYNAMODB_TABLE_STOCKS}'
        - Fn::GetAtt: [ catalogItemsQueue, Arn ]
    - Effect: "Allow"
      Action:
        - 'sns:Publish'
      Resource:
        Ref: createProductTopic
  httpApi:
    cors: true
custom:
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk

resources:
  Resources:
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic

functions:
  catalogBatchProcess:
    handler: catalogBatchProcess.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn
  createProduct:
    handler: createProduct.createProduct
    events:
      - http:
          path: /products
          method: POST
  getProductsList:
    handler: getProductsList.getProductsList
    events:
      - httpApi:
          path: /products
          method: get
  getProductsById:
    handler: getProductsById.getProductsById
    events:
      - httpApi:
          path: /products/{productId}
          method: get
